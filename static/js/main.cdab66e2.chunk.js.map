{"version":3,"sources":["component/header/Header.js","component/footer/Footer.js","component/videos/VideoCard.js","component/firebase.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","channel","avatarSrc","song","likes","shares","Avatar","src","Button","mode","index","fontSize","VideoCard","url","useState","isVideoPlaying","setIsVideoPlaying","videoRef","useRef","ref","onClick","current","pause","play","alt","loop","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","reels","setReels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cdab66e2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../header/Header.css\"\nimport ArrowBackIosOutlinedIcon from '@material-ui/icons/ArrowBackIosOutlined';\nimport CameraAltOutlinedIcon from '@material-ui/icons/CameraAltOutlined';\n\nexport default function Header() {\n\n  return (\n    <div className=\"videoHeader\">\n      <ArrowBackIosOutlinedIcon/>\n      <h3>Reels</h3>\n      <CameraAltOutlinedIcon/>\n    </div>\n  )\n\n}\n","import React from \"react\";\nimport \"../footer/Footer.css\"\nimport {Avatar} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport MusicNoteOutlinedIcon from '@material-ui/icons/MusicNoteOutlined';\nimport Ticker from \"react-ticker\";\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport ModeCommentOutlinedIcon from '@material-ui/icons/ModeCommentOutlined';\nimport SendOutlinedIcon from '@material-ui/icons/SendOutlined';\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\nimport ChatBubbleOutlinedIcon from '@material-ui/icons/ChatBubbleOutlined';\nexport default function Footer({channel, avatarSrc, song, likes, shares}) {\n  return (\n    <div className=\"videoFooter\">\n      <div className=\"videoFooter_text\">\n        <Avatar src={avatarSrc}/>\n        <h3>\n          {channel} . <Button> follow</Button>\n        </h3>\n      </div>\n      <div className=\"videoFooter_ticker\">\n        <MusicNoteOutlinedIcon className=\"videoFooter_icon\"/>\n        <Ticker mode={\"smooth\"}>\n          {({index}) => (\n            <>\n              <h1>{song}</h1>\n            </>\n          )}\n        </Ticker>\n      </div>\n      <div className=\"videoFooter_actions\">\n        <div className=\"videoFooter_actions_left\">\n          <FavoriteBorderOutlinedIcon fontSize={\"large\"}/>\n          <ModeCommentOutlinedIcon fontSize={\"large\"}/>\n          <SendOutlinedIcon fontSize={\"large\"}/>\n          <MoreHorizOutlinedIcon fontSize={\"large\"}/>\n        </div>\n        <div className=\"videoFooter_actions_right\">\n          <div className=\"videoFooter_stat\">\n            <FavoriteBorderOutlinedIcon/>\n            <p>{likes}</p>\n          </div>\n          <div className=\"videoFooter_stat\">\n            <ChatBubbleOutlinedIcon/>\n            <p>{shares}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n}\n","import React, {useRef, useState} from \"react\";\nimport '../videos/VideoCard.css';\nimport Header from \"../header/Header\";\nimport Footer from \"../footer/Footer\";\n\nexport default function VideoCard({channel, avatarSrc, song, url, likes, shares}) {\n\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n\n  const videoRef = useRef(null);\n\n  const onVideoPress = () => {\n    if (isVideoPlaying) {\n      videoRef.current.pause();\n      setIsVideoPlaying(false)\n    } else {\n      videoRef.current.play();\n      setIsVideoPlaying(true)\n    }\n  }\n\n  return (\n    <div className=\"videoCard\">\n      <Header/>\n      <video className=\"video_player\"\n             ref={videoRef}\n             onClick={onVideoPress}\n             src={url} alt=\"IG Reel Video\"\n             loop/>\n      <Footer\n        channel={channel}\n        avatarSrc={avatarSrc}\n        song={song}\n        likes={likes}\n        shares={shares}\n      />\n    </div>\n  )\n}\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCzAugumsGd3Drf2NRO-WT5Vsk7YJzNDz8\",\n  authDomain: \"instareels-a39bf.firebaseapp.com\",\n  databaseURL: \"https://instareels-a39bf.firebaseio.com\",\n  projectId: \"instareels-a39bf\",\n  storageBucket: \"instareels-a39bf.appspot.com\",\n  messagingSenderId: \"332046456912\",\n  appId: \"1:332046456912:web:f5c303ed6f49d15dcc5955\",\n  measurementId: \"G-MFV6HE19NS\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport VideoCard from \"./component/videos/VideoCard\";\nimport db from \"../src/component/firebase\";\n\nfunction App() {\n\n  const [reels, setReels] = useState([]);\n\n  useEffect(() => {\n    db.collection('reels').onSnapshot(snapshot => {\n      setReels(snapshot.docs.map(doc => doc.data()))\n    });\n  }, []);\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_top\">\n        <img className=\"app_logo\"\n             src={\"https://firebasestorage.googleapis.com/v0/b/isstracker-190613.appspot.com/o/instalogo.png?alt=media&token=2e9b19ed-2e2c-462b-9d7b-5e8b418d6912\"}\n             alt=\"logo\"\n        />\n        <h1>Reels</h1>\n      </div>\n\n      <div className=\"app_videos\">\n        {reels.map(({channel, avatarSrc, song, url, likes, shares}) => (\n            <VideoCard\n              channel={channel}\n              avatarSrc={avatarSrc}\n              song={song}\n              url={url}\n              likes={likes}\n              shares={shares}\n            />\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}